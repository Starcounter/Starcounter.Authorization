using System;
using System.Collections.Generic;
using System.Linq;

namespace Starcounter.Authorization.PageSecurity
{
    /// <summary>
    /// Maintains cache related to code generated by <see cref="CheckersCreator"/>. This class is not thread-safe.
    /// </summary>
    internal class CheckersCache
    {
        private readonly Dictionary<Type, Dictionary<Type,Delegate>> _cache = new Dictionary<Type, Dictionary<Type, Delegate>>();

        /// <summary>
        /// Updates the cache under key <paramref name="pageType"/>. Returns an entry containing <paramref name="existingCheck"/> and any
        /// preexisting items. Returns an immutable snapshot of data.
        /// </summary>
        /// <param name="existingCheck"></param>
        /// <param name="pageType"></param>
        /// <returns></returns>
        public IReadOnlyCollection<Entry> GetUpdateEntry(Check existingCheck, Type pageType)
        {
            if (!_cache.TryGetValue(pageType, out var entryFromCache))
            {
                entryFromCache = new Dictionary<Type, Delegate>();
                _cache[pageType] = entryFromCache;
            }

            entryFromCache[existingCheck.PageType] = existingCheck.CheckAction;

            return entryFromCache
                .Select(kvp => new Entry(kvp.Key, kvp.Value))
                .ToList();
        }

        public struct Entry
        {
            public Entry(Type outerType, Delegate check)
            {
                OuterType = outerType;
                Check = check;
            }

            public Type OuterType { get; private set; }
            public Delegate Check { get; private set; }
        }
    }
}